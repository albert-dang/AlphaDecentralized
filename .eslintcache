[{"D:\\github\\alphadecentralized\\src\\index.js":"1","D:\\github\\alphadecentralized\\src\\reportWebVitals.js":"2","D:\\github\\alphadecentralized\\src\\App.js":"3","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByReact.js":"4","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByPandas.js":"5","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\ShowcaseSlider.js":"6","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByZipline.js":"7","D:\\github\\alphadecentralized\\src\\components\\queryForm\\QueryForm.js":"8","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\ReportSlider.js":"9","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\FundamentalReport.js":"10","D:\\github\\alphadecentralized\\src\\components\\FundamentalReportContext.js":"11","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\RedditStocksReport.js":"12","D:\\github\\alphadecentralized\\src\\components\\RedditStocksContext.js":"13","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\tooltips\\RedditStocksTip.js":"14"},{"size":815,"mtime":1613458761906,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1609871479837,"results":"17","hashOfConfig":"16"},{"size":429,"mtime":1613717592426,"results":"18","hashOfConfig":"16"},{"size":354,"mtime":1609877165835,"results":"19","hashOfConfig":"16"},{"size":375,"mtime":1609877166635,"results":"20","hashOfConfig":"16"},{"size":1156,"mtime":1613061152248,"results":"21","hashOfConfig":"16"},{"size":378,"mtime":1610089124552,"results":"22","hashOfConfig":"16"},{"size":1696,"mtime":1613718252979,"results":"23","hashOfConfig":"16"},{"size":1434,"mtime":1613720353810,"results":"24","hashOfConfig":"16"},{"size":1981,"mtime":1613722559309,"results":"25","hashOfConfig":"16"},{"size":681,"mtime":1613411018274,"results":"26","hashOfConfig":"16"},{"size":2593,"mtime":1613752665091,"results":"27","hashOfConfig":"16"},{"size":940,"mtime":1613493097746,"results":"28","hashOfConfig":"16"},{"size":579,"mtime":1613752664760,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"wylu80",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\github\\alphadecentralized\\src\\index.js",[],["60","61"],"D:\\github\\alphadecentralized\\src\\reportWebVitals.js",[],"D:\\github\\alphadecentralized\\src\\App.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByReact.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByPandas.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\ShowcaseSlider.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByZipline.js",[],"D:\\github\\alphadecentralized\\src\\components\\queryForm\\QueryForm.js",["62"],"import React, {Component} from 'react'\r\nimport FundamentalReportContext from '../FundamentalReportContext'\r\nimport './QueryForm.css'\r\n\r\nexport default class QueryForm extends Component{\r\n    static contextType = FundamentalReportContext\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            symbol: 'GOOGL'\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const{setData} = this.context\r\n        const assetClass = this.state.assetClass\r\n        const symbol = this.state.symbol\r\n\r\n        fetch(`https://dangitsal.pythonanywhere.com/api/stocks?symbol=${symbol}`)\r\n            .then(response => response.json())\r\n            .then((jsonData) => {\r\n                console.log(JSON.stringify(jsonData))\r\n                setData(jsonData)\r\n            })\r\n            .catch((error) => {\r\n            console.error(error)\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const{symbol} = this.state.symbol\r\n        return(\r\n            <div className='queryFormWrapper'>\r\n                <form className='queryForm' onSubmit={this.onSubmit}>\r\n                    <label className='symbolLabel'>\r\n                        Symbol:\r\n                        <input type='text' name='symbol' value={symbol} onChange={this.onChange}/>\r\n                    </label>\r\n                    <div className='queryButtonWrapped'>\r\n                        <button className='queryButton' type='submit'>\r\n                            Analyze\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\ReportSlider.js",[],"D:\\github\\alphadecentralized\\src\\components\\reportSlider\\FundamentalReport.js",[],"D:\\github\\alphadecentralized\\src\\components\\FundamentalReportContext.js",[],"D:\\github\\alphadecentralized\\src\\components\\reportSlider\\RedditStocksReport.js",["63","64","65","66","67","68"],"D:\\github\\alphadecentralized\\src\\components\\RedditStocksContext.js",[],"D:\\github\\alphadecentralized\\src\\components\\reportSlider\\tooltips\\RedditStocksTip.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":22,"column":15,"nodeType":"75","messageId":"76","endLine":22,"endColumn":25},{"ruleId":"77","severity":1,"message":"78","line":8,"column":13,"nodeType":"79","messageId":"80","endLine":8,"endColumn":100},{"ruleId":"81","severity":1,"message":"82","line":10,"column":145,"nodeType":"83","messageId":"84","endLine":10,"endColumn":147},{"ruleId":"81","severity":1,"message":"82","line":10,"column":161,"nodeType":"83","messageId":"84","endLine":10,"endColumn":163},{"ruleId":"81","severity":1,"message":"82","line":10,"column":177,"nodeType":"83","messageId":"84","endLine":10,"endColumn":179},{"ruleId":"85","severity":1,"message":"86","line":11,"column":16,"nodeType":"75","messageId":"87","endLine":11,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":12,"column":12,"nodeType":"79","messageId":"80","endLine":12,"endColumn":143},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'assetClass' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-use-before-define","'today' was used before it was defined.","usedBeforeDefined","no-global-assign","no-unsafe-negation"]