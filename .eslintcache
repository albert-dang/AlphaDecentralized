[{"D:\\github\\alphadecentralized\\src\\index.js":"1","D:\\github\\alphadecentralized\\src\\reportWebVitals.js":"2","D:\\github\\alphadecentralized\\src\\App.js":"3","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByReact.js":"4","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByPandas.js":"5","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\ShowcaseSlider.js":"6","D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByZipline.js":"7","D:\\github\\alphadecentralized\\src\\components\\queryForm\\QueryForm.js":"8","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\ReportSlider.js":"9","D:\\github\\alphadecentralized\\src\\components\\Navbar.js":"10","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\FundamentalReport.js":"11","D:\\github\\alphadecentralized\\src\\components\\FundamentalReportContext.js":"12","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\RedditStocksReport.js":"13","D:\\github\\alphadecentralized\\src\\components\\RedditStocksContext.js":"14"},{"size":815,"mtime":1613433053983,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1609871479837,"results":"17","hashOfConfig":"16"},{"size":489,"mtime":1612894842267,"results":"18","hashOfConfig":"16"},{"size":354,"mtime":1609877165835,"results":"19","hashOfConfig":"16"},{"size":375,"mtime":1609877166635,"results":"20","hashOfConfig":"16"},{"size":1156,"mtime":1613061152248,"results":"21","hashOfConfig":"16"},{"size":378,"mtime":1610089124552,"results":"22","hashOfConfig":"16"},{"size":2056,"mtime":1613410198990,"results":"23","hashOfConfig":"16"},{"size":1438,"mtime":1613430187537,"results":"24","hashOfConfig":"16"},{"size":409,"mtime":1612894787900,"results":"25","hashOfConfig":"16"},{"size":1788,"mtime":1613428650508,"results":"26","hashOfConfig":"16"},{"size":681,"mtime":1613411018274,"results":"27","hashOfConfig":"16"},{"size":2136,"mtime":1613430591740,"results":"28","hashOfConfig":"16"},{"size":912,"mtime":1613428885169,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wylu80",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},"D:\\github\\alphadecentralized\\src\\index.js",[],"D:\\github\\alphadecentralized\\src\\reportWebVitals.js",[],["63","64"],"D:\\github\\alphadecentralized\\src\\App.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByReact.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByPandas.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\ShowcaseSlider.js",[],"D:\\github\\alphadecentralized\\src\\components\\poweredByShowcase\\PoweredByZipline.js",[],"D:\\github\\alphadecentralized\\src\\components\\queryForm\\QueryForm.js",[],"D:\\github\\alphadecentralized\\src\\components\\reportSlider\\ReportSlider.js",[],"D:\\github\\alphadecentralized\\src\\components\\Navbar.js",["65","66","67","68","69"],"import React, {Component} from 'react'\r\nimport './navbar.css'\r\n\r\nexport default class Navbar extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n              <ul id='nav'>\r\n                <li><a href=\"#\"></a>Analyze</li>\r\n                <li><a href=\"#\">Research</a></li>\r\n                <li><a href=\"#\">About</a></li>\r\n              </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\github\\alphadecentralized\\src\\components\\reportSlider\\FundamentalReport.js",[],"D:\\github\\alphadecentralized\\src\\components\\FundamentalReportContext.js",[],"D:\\github\\alphadecentralized\\src\\components\\reportSlider\\RedditStocksReport.js",["70","71","72","73","74","75"],"import React, {useContext} from 'react'\r\nimport RedditStocksContext from '../RedditStocksContext'\r\nimport './RedditStocksReport.css'\r\n\r\nconst RedditStocks = () => {\r\n  var objToday = new Date(),\r\n  weekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),\r\n  dayOfWeek = weekday[objToday.getDay()],\r\n  domEnder = function() { var a = objToday; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\" }(),\r\n  dayOfMonth = today + ( objToday.getDate() < 10) ? '0' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\r\n  months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),\r\n  curMonth = months[objToday.getMonth()],\r\n  curYear = objToday.getFullYear()\r\n  var today = '9AM ' + dayOfWeek + ' ' + dayOfMonth + ' of ' + curMonth + ', ' + curYear\r\n\r\n  const redditStocks = useContext(RedditStocksContext)\r\n\r\n  return (\r\n    <div className = 'redditStocksWrapper'>\r\n      <h3>Top Mentioned Stocks on Reddit (24 Hours)</h3>\r\n      <p>{today}</p>\r\n      <div className = 'redditStocksBody' style={{marginTop: '30px'}}>\r\n        <div className = 'tickersColumn'>\r\n          <p>1: {JSON.stringify(redditStocks)}</p>\r\n          <p>2: {redditStocks}</p>\r\n          <p>3: {redditStocks}</p>\r\n          <p>4: {redditStocks}</p>\r\n          <p>5: {redditStocks}</p>\r\n          <p>6: {redditStocks}</p>\r\n          <p>7: {redditStocks}</p>\r\n          <p>8: {redditStocks}</p>\r\n          <p>9: {redditStocks}</p>\r\n          <p>10: {redditStocks}</p>\r\n        </div>\r\n        <div className = 'mentionsColumn'>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n          <p>{redditStocks}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RedditStocks",["76","77"],"D:\\github\\alphadecentralized\\src\\components\\RedditStocksContext.js",["78"],"import React, {Component, createContext} from \"react\"\r\n\r\nconst RedditStocksContext = createContext()\r\nvar redditStocks\r\n\r\nfetch(`https://dangitsal.pythonanywhere.com/api/redditstocks`)\r\n.then(response => response.json())\r\n.then((jsonData) => {\r\n    console.log(JSON.stringify(jsonData))\r\n    redditStocks = jsonData\r\n})\r\n.catch((error) => {\r\nconsole.error(error)\r\n})\r\n\r\nexport class RedditStocksProvider extends Component{\r\n  state = {\r\n    data: 'Loading...'\r\n  }\r\n\r\n  setData = (data) => {\r\n    this.setState((prevState) => (({data})))\r\n  }\r\n\r\n  render(){\r\n    const {children} = this.props\r\n    const {data} = this.state\r\n    const {setData} = this\r\n\r\n    return(\r\n        <RedditStocksContext.Provider\r\n          value={{\r\n            data,\r\n            setData\r\n          }}\r\n        >\r\n          {children}\r\n        </RedditStocksContext.Provider>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default RedditStocksContext",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":9,"column":21,"nodeType":"89","endLine":9,"endColumn":33},{"ruleId":"90","severity":1,"message":"91","line":9,"column":21,"nodeType":"89","endLine":9,"endColumn":33},{"ruleId":"90","severity":1,"message":"91","line":10,"column":21,"nodeType":"89","endLine":10,"endColumn":33},{"ruleId":"90","severity":1,"message":"91","line":11,"column":21,"nodeType":"89","endLine":11,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":7,"column":13,"nodeType":"94","messageId":"95","endLine":7,"endColumn":100},{"ruleId":"96","severity":1,"message":"97","line":9,"column":145,"nodeType":"98","messageId":"99","endLine":9,"endColumn":147},{"ruleId":"96","severity":1,"message":"97","line":9,"column":161,"nodeType":"98","messageId":"99","endLine":9,"endColumn":163},{"ruleId":"96","severity":1,"message":"97","line":9,"column":177,"nodeType":"98","messageId":"99","endLine":9,"endColumn":179},{"ruleId":"100","severity":1,"message":"101","line":10,"column":16,"nodeType":"85","messageId":"102","endLine":10,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":11,"column":12,"nodeType":"94","messageId":"95","endLine":11,"endColumn":143},{"ruleId":"79","replacedBy":"103"},{"ruleId":"81","replacedBy":"104"},{"ruleId":"83","severity":1,"message":"105","line":10,"column":5,"nodeType":"85","messageId":"86","endLine":10,"endColumn":17},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-use-before-define","'today' was used before it was defined.","usedBeforeDefined",["106"],["107"],"'redditStocks' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]